{
  "name": "imagemagick-native",
  "description": "ImageMagick's Magick++ bindings for NodeJS",
  "keywords": [
    "imagemagick",
    "magick++",
    "resize",
    "convert"
  ],
  "version": "0.2.8",
  "repository": {
    "type": "git",
    "url": "git://github.com/mash/node-imagemagick-native.git"
  },
  "author": {
    "name": "Masakazu Ohtsuka",
    "email": "o.masakazu@gmail.com",
    "url": "http://maaash.jp/"
  },
  "contributors": [],
  "main": "./index.js",
  "scripts": {
    "test": "node test/test.js",
    "install": "node-gyp rebuild"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "tap": "*",
    "grunt": "~0.4.1",
    "grunt-release": "~0.3.5",
    "grunt-contrib-clean": "~0.4.1"
  },
  "readme": "# node-imagemagick-native\n\n[Imagemagick](http://www.imagemagick.org/)'s [Magick++](http://www.imagemagick.org/Magick++/) binding for [Node](http://nodejs.org/).\n\n[![Build Status](https://travis-ci.org/mash/node-imagemagick-native.png)](https://travis-ci.org/mash/node-imagemagick-native)\n\n## Example\n\n    var imagemagick = require('imagemagick-native')\n    ,   srcData     = require('fs').readFileSync('./test/test.png');\n\n    // returns a Buffer instance\n    var resizedBuffer = imagemagick.convert({\n        srcData: srcData, // provide a Buffer instance\n        width: 100,\n        height: 100,\n        resizeStyle: \"aspectfill\",\n        quality: 80,\n        format: 'JPEG'\n    });\n\n    require('fs').writeFileSync('./test/out.png', resizedBuffer, 'binary');\n\n## API\n\n### convert( options )\n\nConvert a buffer provided as `options.srcData` and return a Buffer.\n\nThe `options` argument can have following values:\n\n    {\n        srcData:     required. Buffer with binary image data\n        quality:     optional. 0-100 integer, default 75. JPEG/MIFF/PNG compression level.\n        width:       optional. px.\n        height:      optional. px.\n        resizeStyle: optional. default: \"aspectfill\". can be \"aspectfit\", \"fill\"\n                     aspectfill: keep aspect ratio, get the exact provided size,\n                                 crop top/bottom or left/right if necessary\n                     aspectfit:  keep aspect ratio, get maximum image that fits inside provided size\n                     fill:       forget aspect ratio, get the exact provided size\n        format:      optional. one of http://www.imagemagick.org/script/formats.php ex: \"JPEG\"\n        debug:       optional. 1 or 0\n    }\n\n### identify( options )\n\nIdentify a buffer provided as `srcData` and return an object.\n\nThe `options` argument can have following values:\n\n    {\n        srcData:     required. Buffer with binary image data\n        debug:       optional. 1 or 0\n    }\n\nThe method returns an object similar to:\n\n    {\n        format: 'JPEG',\n        width: 3904,\n        height: 2622,\n        depth: 8\n    }\n\n### quantizeColors( options )\n\nQuantize the image to a specified amount of colors from a buffer provided as `srcData` and return an array.\n\nThe `options` argument can have following values:\n\n    {\n        srcData:     required. Buffer with binary image data\n        colors:      required. number of colors to extract, defaults to 5\n        debug:       optional. 1 or 0\n    }\n\nThe method returns an array similar to:\n\n    [\n        {\n            r: 83,\n            g: 56,\n            b: 35,\n            hex: '533823'\n        },\n        {\n            r: 149,\n            g: 110,\n            b: 73,\n            hex: '956e49'\n        },\n        {\n            r: 165,\n            g: 141,\n            b: 111,\n            hex: 'a58d6f\n        }\n    ]\n\n### composite( options )\n\nComposite a buffer provided as `options.compositeData` on a buffer provided as `options.srcData` with gravity specified by `options.gravity` and return a Buffer.\n\nThe `options` argument can have following values:\n\n    {\n        srcData:       required. Buffer with binary image data\n        compositeData: required. Buffer with binary image data\n        gravity:       optional. Can be one of \"CenterGravity\" \"EastGravity\" \"ForgetGravity\" \"NorthEastGravity\" \"NorthGravity\" \"NorthWestGravity\" \"SouthEastGravity\" \"SouthGravity\" \"SouthWestGravity\" \"WestGravity\"\n        debug:         optional. 1 or 0\n    }\n\nThis library currently provide only these, please try [node-imagemagick](https://github.com/rsms/node-imagemagick/) if you want more.\n\n## Installation\n\n### Linux / Mac\n\nInstall [Imagemagick](http://www.imagemagick.org/) with headers before installing this module.\nTested with ImageMagick 6.7.7 on CentOS6 and MacOS10.7, Ubuntu12.04 .\n\n    brew install imagemagick --build-from-source\n\n      or\n\n    sudo yum install ImageMagick-c++ ImageMagick-c++-devel\n\n      or\n\n    sudo apt-get install libmagick++-dev\n\nMake sure you can find Magick++-config in your PATH.\nThen:\n\n    npm install imagemagick-native\n\n### Windows\n\nTested on Windows 7 x64.\n\n1. Install Python 2.7.3 only 2.7.3 nothing else works quite right!\n\n    If you use Cygwin ensure you don't have Python installed in Cygwin setup as there will be some confusion about what version to use.\n\n2. Install [Visual Studio C++ 2010 Express](http://www.microsoft.com/en-us/download/details.aspx?id=8279)\n\n3. (64-bit only) [Install Windows 7 64-bit SDK](http://www.microsoft.com/en-us/download/details.aspx?id=8279)\n\n4. Install [Imagemagick dll binary x86 Q16](http://www.imagemagick.org/download/binaries/ImageMagick-6.8.5-10-Q16-x86-dll.exe) or [Imagemagick dll binary x64 Q16](http://www.imagemagick.org/download/binaries/ImageMagick-6.8.5-10-Q16-x64-dll.exe), check for libraries and includes during install.\n\nThen:\n\n    npm install imagemagick-native\n\n## Performance - simple thumbnail creation\n\n    imagemagick:       16.09ms per iteration\n    imagemagick-native: 0.89ms per iteration\n\nSee `node test/benchmark.js` for details.\n\n\n## License (MIT)\n\nCopyright (c) Masakazu Ohtsuka <http://maaash.jp/>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.markdown",
  "gypfile": true,
  "bugs": {
    "url": "https://github.com/mash/node-imagemagick-native/issues"
  },
  "_id": "imagemagick-native@0.2.8",
  "dist": {
    "shasum": "f56ffb947c875734ae282765f4a4de66e22f0eff"
  },
  "_from": "imagemagick-native@",
  "_resolved": "https://registry.npmjs.org/imagemagick-native/-/imagemagick-native-0.2.8.tgz"
}
